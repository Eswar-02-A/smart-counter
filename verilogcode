module SmartCounter (
    input wire clk,
    input wire reset,
    input wire load,
    input wire [7:0] data_in,
    output reg [7:0] count
);

always @(posedge clk or posedge reset) begin
    if (reset) begin
        count <= 8'b0;
    end else if (load) begin
        count <= data_in;
    end else begin
        count <= count + 1;
    end
end

endmodule
//test bench

`timescale 1ns / 1ps

module SmartCounter_tb;

reg clk;
reg reset;
reg load;
reg [7:0] data_in;
wire [7:0] count;

SmartCounter uut (
    .clk(clk),
    .reset(reset),
    .load(load),
    .data_in(data_in),
    .count(count)
);

initial begin
    $monitor("Time=%0t | Reset=%b | Load=%b | Data_in=%b | Count=%b", $time, reset, load, data_in, count);

    // Initialize
    clk = 0;
    reset = 0;
    load = 0;
    data_in = 8'b00000000;

    // Apply reset
    #5 reset = 1;
    #5 reset = 0;

    // Normal counting
    #10;

    // Load value 0x55
    #5 load = 1; data_in = 8'h55;
    #10 load = 0;

    // Continue counting
    #30;

    // Load value 0xAA
    #5 load = 1; data_in = 8'hAA;
    #10 load = 0;

    // Reset again
    #20 reset = 1;
    #10 reset = 0;

    #20 $finish;
end

// Clock generation
always #5 clk = ~clk;

endmodule
